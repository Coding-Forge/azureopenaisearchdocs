{"version":3,"mappings":"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","names":["github","Layout","jsxs","styles","jsx","Link","NavLink","isActive","Outlet","askApi","options","response","_a","_b","_c","_d","_e","_f","_g","_h","_i","parsedResponse","chatApi","_j","getCitationFilePath","citation","Approaches","RetrievalMode","parseAnswerToHtml","answer","onCitationClicked","citations","followupQuestions","parsedAnswer","match","content","part","index","citationIndex","path","renderToStaticMarkup","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","x","i","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","error","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","question","setQuestion","useState","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","sendQuestionDisabled","TextField","Send28Filled","Example","text","value","onClick","EXAMPLES","ExampleList","onExampleClicked","UserChatMessage","message","parseSupportingContentItem","item","parts","title","SupportingContent","supportingContent","parsed","AnalysisPanelTabs","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","sanitizedThoughts","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","Text","ClearChatButton","Delete24Regular","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","retrieveCount","setRetrieveCount","retrievalMode","setRetrievalMode","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setError","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","makeApiRequest","request","a","result","e","clearChat","useEffect","onPromptTemplateChange","onRetrieveCountChange","onRetrievalModeChange","option","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","onUseSuggestFollowupQuestionsChange","example","onShowCitation","onToggleTab","tab","c","q","Fragment","SparkleFilled","Panel","DefaultButton","SpinButton","Checkbox","Dropdown","initializeIcons","router","createHashRouter","ReactDOM","React","RouterProvider"],"sources":["../../../frontend/src/assets/github.svg","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["export default \"__VITE_ASSET__4e6ad5ae__\"","import { Outlet, NavLink, Link } from \"react-router-dom\";\n\nimport github from \"../../assets/github.svg\";\n\nimport styles from \"./Layout.module.css\";\n\nconst Layout = () => {\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer}>\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\n                        <h3 className={styles.headerTitle}>GPT + Enterprise data | Sample</h3>\n                    </Link>\n                    <nav>\n                        <ul className={styles.headerNavList}>\n                            <li>\n                                <NavLink to=\"/\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\n                                    Chat\n                                </NavLink>\n                            </li>\n                            <li className={styles.headerNavLeftMargin}>\n                                <NavLink to=\"/qa\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\n                                    Ask a question\n                                </NavLink>\n                            </li>\n                            <li className={styles.headerNavLeftMargin}>\n                                <a href=\"https://aka.ms/entgptsearch\" target={\"_blank\"} title=\"Github repository link\">\n                                    <img\n                                        src={github}\n                                        alt=\"Github logo\"\n                                        aria-label=\"Link to github repository\"\n                                        width=\"20px\"\n                                        height=\"20px\"\n                                        className={styles.githubLogo}\n                                    />\n                                </a>\n                            </li>\n                        </ul>\n                    </nav>\n                    <h4 className={styles.headerRightText}>Azure OpenAI + Cognitive Search</h4>\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;\n","import { AskRequest, AskResponse, ChatRequest } from \"./models\";\n\nexport async function askApi(options: AskRequest): Promise<AskResponse> {\n    const response = await fetch(\"/ask\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            question: options.question,\n            approach: options.approach,\n            overrides: {\n                retrieval_mode: options.overrides?.retrievalMode,\n                semantic_ranker: options.overrides?.semanticRanker,\n                semantic_captions: options.overrides?.semanticCaptions,\n                top: options.overrides?.top,\n                temperature: options.overrides?.temperature,\n                prompt_template: options.overrides?.promptTemplate,\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\n                exclude_category: options.overrides?.excludeCategory\n            }\n        })\n    });\n\n    const parsedResponse: AskResponse = await response.json();\n    if (response.status > 299 || !response.ok) {\n        throw Error(parsedResponse.error || \"Unknown error\");\n    }\n\n    return parsedResponse;\n}\n\nexport async function chatApi(options: ChatRequest): Promise<AskResponse> {\n    const response = await fetch(\"/chat\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n            history: options.history,\n            approach: options.approach,\n            overrides: {\n                retrieval_mode: options.overrides?.retrievalMode,\n                semantic_ranker: options.overrides?.semanticRanker,\n                semantic_captions: options.overrides?.semanticCaptions,\n                top: options.overrides?.top,\n                temperature: options.overrides?.temperature,\n                prompt_template: options.overrides?.promptTemplate,\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\n                exclude_category: options.overrides?.excludeCategory,\n                suggest_followup_questions: options.overrides?.suggestFollowupQuestions\n            }\n        })\n    });\n\n    const parsedResponse: AskResponse = await response.json();\n    if (response.status > 299 || !response.ok) {\n        throw Error(parsedResponse.error || \"Unknown error\");\n    }\n\n    return parsedResponse;\n}\n\nexport function getCitationFilePath(citation: string): string {\n    return `/content/${citation}`;\n}\n","export const enum Approaches {\n    RetrieveThenRead = \"rtr\",\n    ReadRetrieveRead = \"rrr\",\n    ReadDecomposeAsk = \"rda\"\n}\n\nexport const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport type AskRequestOverrides = {\n    retrievalMode?: RetrievalMode;\n    semanticRanker?: boolean;\n    semanticCaptions?: boolean;\n    excludeCategory?: string;\n    top?: number;\n    temperature?: number;\n    promptTemplate?: string;\n    promptTemplatePrefix?: string;\n    promptTemplateSuffix?: string;\n    suggestFollowupQuestions?: boolean;\n};\n\nexport type AskRequest = {\n    question: string;\n    approach: Approaches;\n    overrides?: AskRequestOverrides;\n};\n\nexport type AskResponse = {\n    answer: string;\n    thoughts: string | null;\n    data_points: string[];\n    error?: string;\n};\n\nexport type ChatTurn = {\n    user: string;\n    bot?: string;\n};\n\nexport type ChatRequest = {\n    history: ChatTurn[];\n    approach: Approaches;\n    overrides?: AskRequestOverrides;\n};\n","import { renderToStaticMarkup } from \"react-dom/server\";\nimport { getCitationFilePath } from \"../../api\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n    followupQuestions: string[];\n};\n\nexport function parseAnswerToHtml(answer: string, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const citations: string[] = [];\n    const followupQuestions: string[] = [];\n\n    // Extract any follow-up questions that might be in the answer\n    let parsedAnswer = answer.replace(/<<([^>>]+)>>/g, (match, content) => {\n        followupQuestions.push(content);\n        return \"\";\n    });\n\n    // trim any whitespace from the end of the answer after removing follow-up questions\n    parsedAnswer = parsedAnswer.trim();\n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            const path = getCitationFilePath(part);\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations,\n        followupQuestions\n    };\n}\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\n};\n","import { useMemo } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./Answer.module.css\";\n\nimport { AskResponse, getCitationFilePath } from \"../../api\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\ninterface Props {\n    answer: AskResponse;\n    isSelected?: boolean;\n    onCitationClicked: (filePath: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    isSelected,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions\n}: Props) => {\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(answer.answer, onCitationClicked), [answer]);\n\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"Lightbulb\" }}\n                            title=\"Show thought process\"\n                            ariaLabel=\"Show thought process\"\n                            onClick={() => onThoughtProcessClicked()}\n                            disabled={!answer.thoughts}\n                        />\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"ClipboardList\" }}\n                            title=\"Show supporting content\"\n                            ariaLabel=\"Show supporting content\"\n                            onClick={() => onSupportingContentClicked()}\n                            disabled={!answer.data_points.length}\n                        />\n                    </div>\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>Citations:</span>\n                        {parsedAnswer.citations.map((x, i) => {\n                            const path = getCitationFilePath(x);\n                            return (\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\n                                    {`${++i}. ${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!parsedAnswer.followupQuestions.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\n                        {parsedAnswer.followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        Generating answer\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { useState } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Send28Filled } from \"@fluentui/react-icons\";\n\nimport styles from \"./QuestionInput.module.css\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    placeholder?: string;\n    clearOnSend?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    const sendQuestionDisabled = disabled || !question.trim();\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <TextField\n                className={styles.questionInputTextArea}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <div\n                    className={`${styles.questionInputSendButton} ${sendQuestionDisabled ? styles.questionInputSendButtonDisabled : \"\"}`}\n                    aria-label=\"Ask question button\"\n                    onClick={sendQuestion}\n                >\n                    <Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />\n                </div>\n            </div>\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\n\nimport styles from \"./Example.module.css\";\n\nexport type ExampleModel = {\n    text: string;\n    value: string;\n};\n\nconst EXAMPLES: ExampleModel[] = [\n    {\n        text: \"What is included in my Northwind Health Plus plan that is not in standard?\",\n        value: \"What is included in my Northwind Health Plus plan that is not in standard?\"\n    },\n    { text: \"What happens in a performance review?\", value: \"What happens in a performance review?\" },\n    { text: \"What does a Product Manager do?\", value: \"What does a Product Manager do?\" }\n];\n\ninterface Props {\n    onExampleClicked: (value: string) => void;\n}\n\nexport const ExampleList = ({ onExampleClicked }: Props) => {\n    return (\n        <ul className={styles.examplesNavList}>\n            {EXAMPLES.map((x, i) => (\n                <li key={i}>\n                    <Example text={x.text} value={x.value} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","type ParsedSupportingContentItem = {\n    title: string;\n    content: string;\n};\n\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\n    // Assumes the item starts with the file name followed by : and the content.\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\n    const parts = item.split(\": \");\n    const title = parts[0];\n    const content = parts.slice(1).join(\": \");\n\n    return {\n        title,\n        content\n    };\n}\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\n\nimport styles from \"./SupportingContent.module.css\";\n\ninterface Props {\n    supportingContent: string[];\n}\n\nexport const SupportingContent = ({ supportingContent }: Props) => {\n    return (\n        <ul className={styles.supportingContentNavList}>\n            {supportingContent.map((x, i) => {\n                const parsed = parseSupportingContentItem(x);\n\n                return (\n                    <li className={styles.supportingContentItem}>\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\n                        <p className={styles.supportingContentItemText}>{parsed.content}</p>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","export enum AnalysisPanelTabs {\n    ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import { Pivot, PivotItem } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { AskResponse } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    citationHeight: string;\n    answer: AskResponse;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.thoughts;\n    const isDisabledSupportingContentTab: boolean = !answer.data_points.length;\n    const isDisabledCitationTab: boolean = !activeCitation;\n\n    const sanitizedThoughts = DOMPurify.sanitize(answer.thoughts!);\n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            <PivotItem\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\n                headerText=\"Thought process\"\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <div className={styles.thoughtProcess} dangerouslySetInnerHTML={{ __html: sanitizedThoughts }}></div>\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\n                headerText=\"Supporting content\"\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\n            >\n                <SupportingContent supportingContent={answer.data_points} />\n            </PivotItem>\n            <PivotItem\n                itemKey={AnalysisPanelTabs.CitationTab}\n                headerText=\"Citation\"\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\n            >\n                <iframe title=\"Citation\" src={activeCitation} width=\"100%\" height={citationHeight} />\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { Text } from \"@fluentui/react\";\nimport { Settings24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./SettingsButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nexport const SettingsButton = ({ className, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`} onClick={onClick}>\n            <Settings24Regular />\n            <Text>{\"Developer settings\"}</Text>\n        </div>\n    );\n};\n","import { Text } from \"@fluentui/react\";\nimport { Delete24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"} ${disabled && styles.disabled}`} onClick={onClick}>\n            <Delete24Regular />\n            <Text>{\"Clear chat\"}</Text>\n        </div>\n    );\n};\n","import { useRef, useState, useEffect } from \"react\";\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton, Dropdown, IDropdownOption } from \"@fluentui/react\";\nimport { SparkleFilled } from \"@fluentui/react-icons\";\n\nimport styles from \"./Chat.module.css\";\n\nimport { chatApi, RetrievalMode, Approaches, AskResponse, ChatRequest, ChatTurn } from \"../../api\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: AskResponse][]>([]);\n\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        try {\n            const history: ChatTurn[] = answers.map(a => ({ user: a[0], bot: a[1].answer }));\n            const request: ChatRequest = {\n                history: [...history, { user: question, bot: undefined }],\n                approach: Approaches.ReadRetrieveRead,\n                overrides: {\n                    promptTemplate: promptTemplate.length === 0 ? undefined : promptTemplate,\n                    excludeCategory: excludeCategory.length === 0 ? undefined : excludeCategory,\n                    top: retrieveCount,\n                    retrievalMode: retrievalMode,\n                    semanticRanker: useSemanticRanker,\n                    semanticCaptions: useSemanticCaptions,\n                    suggestFollowupQuestions: useSuggestFollowupQuestions\n                }\n            };\n            const result = await chatApi(request);\n            setAnswers([...answers, [question, result]]);\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n    };\n\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined, index?: number | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticRanker(!!checked);\n    };\n\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSemanticCaptions(!!checked);\n    };\n\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\n        setExcludeCategory(newValue || \"\");\n    };\n\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseSuggestFollowupQuestions(!!checked);\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.commandsContainer}>\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n            </div>\n            <div className={styles.chatRoot}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <div className={styles.chatEmptyState}>\n                            <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\n                            <h1 className={styles.chatEmptyStateTitle}>Chat with your data</h1>\n                            <h2 className={styles.chatEmptyStateSubtitle}>Ask anything or try an example</h2>\n                            <ExampleList onExampleClicked={onExampleClicked} />\n                        </div>\n                    ) : (\n                        <div className={styles.chatMessageStream}>\n                            {answers.map((answer, index) => (\n                                <div key={index}>\n                                    <UserChatMessage message={answer[0]} />\n                                    <div className={styles.chatMessageGpt}>\n                                        <Answer\n                                            key={index}\n                                            answer={answer[1]}\n                                            isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                            onCitationClicked={c => onShowCitation(c, index)}\n                                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                            onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                            showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\n                                        />\n                                    </div>\n                                </div>\n                            ))}\n                            {isLoading && (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerLoading />\n                                    </div>\n                                </>\n                            )}\n                            {error ? (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                    </div>\n                                </>\n                            ) : null}\n                            <div ref={chatMessageStreamEnd} />\n                        </div>\n                    )}\n\n                    <div className={styles.chatInput}>\n                        <QuestionInput\n                            clearOnSend\n                            placeholder=\"Type a new question (e.g. does my plan cover annual eye exams?)\"\n                            disabled={isLoading}\n                            onSend={question => makeApiRequest(question)}\n                        />\n                    </div>\n                </div>\n\n                {answers.length > 0 && activeAnalysisPanelTab && (\n                    <AnalysisPanel\n                        className={styles.chatAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"810px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n\n                <Panel\n                    headerText=\"Configure answer generation\"\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel=\"Close\"\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    <TextField\n                        className={styles.chatSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label=\"Override prompt template\"\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                    />\n\n                    <SpinButton\n                        className={styles.chatSettingsSeparator}\n                        label=\"Retrieve this many documents from search:\"\n                        min={1}\n                        max={50}\n                        defaultValue={retrieveCount.toString()}\n                        onChange={onRetrieveCountChange}\n                    />\n                    <TextField className={styles.chatSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSemanticRanker}\n                        label=\"Use semantic ranker for retrieval\"\n                        onChange={onUseSemanticRankerChange}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSemanticCaptions}\n                        label=\"Use query-contextual summaries instead of whole documents\"\n                        onChange={onUseSemanticCaptionsChange}\n                        disabled={!useSemanticRanker}\n                    />\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useSuggestFollowupQuestions}\n                        label=\"Suggest follow-up questions\"\n                        onChange={onUseSuggestFollowupQuestionsChange}\n                    />\n                    <Dropdown\n                        className={styles.chatSettingsSeparator}\n                        label=\"Retrieval mode\"\n                        options={[\n                            { key: \"hybrid\", text: \"Vectors + Text (Hybrid)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\n                            { key: \"vectors\", text: \"Vectors\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\n                            { key: \"text\", text: \"Text\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\n                        ]}\n                        required\n                        onChange={onRetrievalModeChange}\n                    />\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { initializeIcons } from \"@fluentui/react\";\n\nimport \"./index.css\";\n\nimport Layout from \"./pages/layout/Layout\";\nimport Chat from \"./pages/chat/Chat\";\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: <Layout />,\n        children: [\n            {\n                index: true,\n                element: <Chat />\n            },\n            {\n                path: \"qa\",\n                lazy: () => import(\"./pages/oneshot/OneShot\")\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <RouterProvider router={router} />\n    </React.StrictMode>\n);\n"],"file":"assets/index-baecc9e5.js"}